1. 임베디드 타입(복합 값 타입)
	- 내장 타입
	- 새로운 값 타입을 직접 정의할 수 있음
	-  JPA는 임베디드 타입(embedded type)이라고 함
	- 주로 기본값 타입을 모아 만들어서 복합값 타입을 모아 만들어서 복합값 타입이라고도 함
	- int, String과 같은 값 타입

2. JPA에서 임베디드 타입 사용법
	- @Embeddable 	: 값 타입을 정의하는 곳에 표시
	- @Embedded	: 값 타입을 사용하는 곳에 표시
	-  기본 생성자 필수

3. 임베디드 타입의 장점
	- 재사용
	- 높은 응집도
	- 객체 지향적인 설계 가능 

4. 임베디드 타입과 테이블 매핑
	- 임베디드 타입은 엔티티 값일 뿐이다.
	- 임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다.
	- 잘 설계된 애플리케이션은 매핑한 테이블의 수보다 클래스의 수가 저 많음.

5. @AttributeOverride : 속성 재정의
	- 한 엔티티에서 같은 값 타입을 사용하면 -> 컬럼명이 중복됨
	- @Attributeoverrides, @AttributeOverride 를 사용해서 컬럼 명 속성을 재정의

6. 불변객체 (setter X)
	- 객체 타입을 수정할 수 없게 만들면 부작용을 원천 차단할 수 있다.
	- 값 타입은 불편 객체로 설계해야함
	- 생성 시점 이후 절대 값을 변경할 수 없는 객체
	- 생성자로만 값을 설정하고 수정자(setter)를 만들지 않으면 됨

7. 객체지향 쿼리 언어(JPQL)
	- JPA 는 다양한 쿼리 방법을 지원
	- JPQL - 권장, 실무사용, 거의 모든 문제 해결 가능
	- JPA Criteria - 자바코드를 짜서 JPA를 빌드해주는 generator 모음 -> 유지보수에 취약
	- QueryDSL -> JPQL 보완, 권장, 실무사용, 쿼리 허용범위 가장 넓음
	- 네이티브 SQL - connect by...
	- JDBC API - MyBatis, SpringJdbcTemplate

8. JPQL
	- JPA를 사용하면 엔티티 객체를 중심으로 개발
	- 문제는 검색 쿼리
	- 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색
	- JPA는 SQL을 추상화한 JPQL 이라는 객체 지향 쿼리 언어 제공
	- SQL과 문법 유사, select, from, where, group by, having, join 지원
	- JPQL은 엔티티 객체를 대상으로 쿼리 작성
	- SQL은 데이터베이스 테이블을 대상으로 쿼리 작성
	- Java Persistence Query Language
	- SQL을 추상화해서 특정 데이터베이스에 의존하지 않음
	- JPA는 JPQL을 분석해서 적절한 SQL을 만들어 데이터베이스를 조회

9. 규칙
	- 엔티티 이름
		-> 테이블명 대신 엔티티명을 사용, @Entity(name = "") 으로 설정 가능
		-> 지정하지 않을 시 클래스 명을 기본값으로 사용(추천)
	- 별칭은 필수
		-> JPQL은 별칭을 필수
		-> AS는 생략 가능


10. JPQL 문법
	- select
		select절
		from절
		where절
		group by절
		having 절
		order by 절

	- update
		update 절
		where 절

	- delete
		delete절
		where절


11. 함수
	- count(m)	// 회원수
	- sum(m.age)	// 나이의 합
	- avg(m.age)		// 평균나이
	- max(m.age)		// 최대나이
	- min(m.age)		// 최소나이

12. TypedQuery, Query

	- TypedQuery : 반환 타입이 명확할 때 사용
	
		TypedQuery<Member> query = 
			("select m from member m", Member.class)

		TypedQuery<String> query = 
			("select m.username from member m", Stringclass)

	- Query : 반환 타입이 명확하지 않을 때 사용 (String, int)
		Query query = 
			("select m.username, m.age from member m")


13. 결과 조회 API
	- query.getResultList()
		: 결과가 없으면 빈 리스트 반환
		: 빈 collection이 반환되기 때문에, nullPointException에 대한 걱정은 안해도 된다.


	- query.getSingleResult() -> 조심해서 사용해야함 -> 값이 하나도 없을경우 일부러 예외발생시켜야 할 경우 사용하면 좋다.
		: 결과가 정확히 하나일때, 단일 객체 반환
		: 결과가 없을 경우 예외 발생 		-> NoReusltException
		: 결과가 둘 이상이면 예외 발생		-> NonUniqueResultException

14. 파라미터 바인딩 - 이름 기준, 위치 기준
 14-1. 이름 기준
	select m from Member m where m.username = :username
	query.setPrarameter("username", usernameParam);
		
 14-2. 위치 기준(권장하지 않음)
	select m from Member m where m.username = ?1
	query.setPrarameter(1, usernameParam);



