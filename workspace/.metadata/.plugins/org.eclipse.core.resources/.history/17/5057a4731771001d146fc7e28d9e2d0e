package com.koreait.mylogin.loginweb.item;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.apache.tomcat.jni.Thread;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/items")
@RequiredArgsConstructor
// @RequiredArgsConstructor
//	: final이 붙은 멤버변수만 사용해서 생성자를 자동으로 만들어준다.
public class ItemController {

	private final ItemRepository itemRepository;
	
	
	@GetMapping
	public String items(Model model) {
		List<Item> items = itemRepository.findAll();
		model.addAttribute("items", items);
		return "/items";
	}
	
	
	
	// /basic/items/아이템의ID
	@GetMapping("/{itemId}")
	public String item(@PathVariable long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "/item";
	}
	
	@GetMapping("/add")
	public String add(Model model) {
		model.addAttribute("item", new Item());  //빈객체
		return "/addForm";
	}

	
	
	
	@PostMapping("/add")
	public String saveV8(Item item, BindingResult bindingResult,  RedirectAttributes redirectAttributes){

		/*
		 * FieldError param
		 * - objectName : 오류가 발생한 객체이름
		 * - field		: 오류 필드
		 * - rejectedValue : 사용자가 입력한 값(거절된 값)
		 * - bindingFailure : 타입오류와 같은 바인딩 실패인지를 구분
		 * - codes 			: 메세지 코드
		 * - arguments		: 메세지에서 사용하는 인자
		 * - defualtMessage : 기본 오류 메세지
		 * */
		
		if(!StringUtils.hasText(item.getItemName())) {
			bindingResult.addError(new FieldError("item", "itemName", item.getItemName(), false,
					new String[] {"required.item.itemName", "required.default"}, null, "default message"));
		}
		
		if(item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
			bindingResult.addError(new FieldError("item", "price", item.getPrice(), false,
					new String[] {"range.item.price"}, new Object[] {1000, 10000}, null));

		}
		
		
		if(item.getQuantity() == null || item.getQuantity() >= 10000) {
			bindingResult.addError(new FieldError("item", "quantity", item.getQuantity(), false,
					new String[] {"max.item.quantity"}, new Object[] {9999}, null));

		}

		if(bindingResult.hasErrors()) {
					System.out.println("errors = " + bindingResult);
					return "basic/addForm";
				}
				
		
		
		Item savaItem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", savaItem.getId());
		redirectAttributes.addAttribute("status", true);
		
		
		return "redirect:/items/{itemId}" ;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	@GetMapping("/{itemId}/edit")
	public String editForm(@PathVariable Long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/editForm";
	}
	

	@PostMapping("/{itemId}/edit")
	public String edit(@PathVariable Long itemId, @ModelAttribute Item item) {
		itemRepository.update(itemId, item);
		//상세페이지
		return "redirect:/basic/items/{itemId}";
	}
	
	
	//테스트용 데이터 추가
	@PostConstruct
	public void init() {
//		System.out.println("초기화 메서드");
		itemRepository.save(new Item("testA", 10000, 10));
		itemRepository.save(new Item("testB", 20000, 20));
		itemRepository.save(new Item("testC", 30000, 30));
	}
	
	@PreDestroy
	public void destroy() {
		System.out.println("종료 메서드");
	}
}
