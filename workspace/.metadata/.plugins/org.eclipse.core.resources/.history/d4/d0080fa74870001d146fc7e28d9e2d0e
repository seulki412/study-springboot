package com.example.item.domain.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.apache.tomcat.jni.Thread;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.item.domain.item.DeliveryCode;
import com.example.item.domain.item.Item;
import com.example.item.domain.item.ItemRepository;
import com.example.item.domain.item.ItemType;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/basic/items")
@RequiredArgsConstructor
// @RequiredArgsConstructor
//	: final이 붙은 멤버변수만 사용해서 생성자를 자동으로 만들어준다.
public class ItemController {

	private final ItemRepository itemRepository;
	
//	@Autowired
	//생성자가 1개만 있으면 @Autowired 생략가능
//	public ItemController(ItemRepository itemRepository) {
//		this.itemRepository = itemRepository;
//	}
	
	@ModelAttribute("regions")
	// Controller를 호출할 때 (어떤 메서드가 호출이 되던간에)
	// model에 자동으로 해당 내용이 담기는게 보장된다.
	public Map<String, String> regions(){
		Map<String, String> regions = new LinkedHashMap<String, String>();
		regions.put("SEOUL", "서울");
		regions.put("BUSAN", "부산");
		regions.put("JEJU", "제주");
		return regions;
}
	
	
	@ModelAttribute("itemType")
	public ItemType[] itemTypes() {
		// enum에있는 값을 배열로 넘겨준다.
		return ItemType.values();
	}
	
	
	@ModelAttribute("deliveryCodes")
	public List<DeliveryCode> deliveryCodes(){
		List<DeliveryCode> deliveryCodes = new ArrayList<DeliveryCode>();
		deliveryCodes.add(new DeliveryCode("FAST", "빠른배송"));
		deliveryCodes.add(new DeliveryCode("NORMAL", "일반배송"));
		deliveryCodes.add(new DeliveryCode("SLOW", "느린배송"));
		return deliveryCodes;
	}
	
	
	@GetMapping
	public String items(Model model) {
		List<Item> items = itemRepository.findAll();
		model.addAttribute("items", items);
		return "basic/items";
	}
	
	
	
	// /basic/items/아이템의ID
	@GetMapping("/{itemId}")
	public String item(@PathVariable long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/item";
	}
	
	@GetMapping("/add")
	public String add(Model model) {
		model.addAttribute("item", new Item());  //빈객체
		return "basic/addForm";
	}
	
//	@PostMapping("/add")
//	public String save(@RequestParam String itemName,
//					   @RequestParam int price,
//					   @RequestParam Integer quantiry,
//					   Model model			
//			) {
//		Item item = new Item();
//		item.setItemName(itemName);
//		item.setPrice(price);
//		item.setQuantity(quantiry);
//		model.addAttribute("item", item);
//		return "basic/item";
//	}
	
//	@PostMapping("/add")
//	public String saveV2(	@ModelAttribute("item")Item item){
		//@ModelAttribute 가 해주는 역할
//		Item item = new Item();
//		item.setItemName(itemName);
//		item.setPrice(price);
//		item.setQuantity(quantiry);
//		model.addAttribute("item", item);
//		itemRepository.save(item);
//		return "basic/item";
//	}
	
	
	/*
	 * @ModelAttribute에서 name 생략
	 * 	-> 생략 시 model에 저장되는 name은 클래스명 첫 글자만 소문자로 등록
	 * 	Item -> item
	 * */
//	@PostMapping("/add")
	public String saveV3(@ModelAttribute Item item){
		itemRepository.save(item);
		return "basic/item";
	}
	
	
	/*
	 * @ModelAttribute 자체도 생략 가능, 그러나 가독성을 위해 권장하지 않음
	 * 
	 * */
//	@PostMapping("/add")
	public String saveV4(Item item){
		itemRepository.save(item);
		return "basic/item";
	}
	
//	@PostMapping("/add")
	public String saveV5(Item item){
		itemRepository.save(item);
		return "redirect:/basic/items/" + item.getId();
	}
	
	
	
	/*
	 * redirect:/basic/items/{itemId}
	 * 	-> @PathVariable	: {itemId}
	 * 	-> 나머지는 파라미터로 처리 : "status=true
	 * 매핑되는 애들은 PathVaireable로 처리 / 매핑 안되는 애들은 파라미터로붙여줌
	 * */ 
//	@PostMapping("/add")
	public String saveV6(Item item, RedirectAttributes redirectAttributes){
		
		System.out.println("item.open = " + item.getOpen());
		System.out.println("item.regoins = " + item.getRegions());
		System.out.println("item.itemtype = " + item.getItemType());
		
		Item savaItem = itemRepository.save(item);
		
		
		redirectAttributes.addAttribute("itemId", savaItem.getId());
		redirectAttributes.addAttribute("status", true);
		

		return "redirect:/basic/items/{itemId}" ;
	}
	
	
	/*
	 * BindingResult : 
	 * - Item 객체에 값이 잘 담기지 않을 때 BindingResult객체에 값이 담긴다.
	 * - 스프링이 제공하는 검증 오류를 보관하는 객체, 검증 오류가 발생하면 여기에 보관
	 * - 주의) BindingResult는 검증할 대상 바로 다음에 와야한다. 순서가 중요!
	 * - BindingResult는 Model에 자동으로 포함된다.
	// 아이템객체에 값이 담기는 순간에 이슈가 생기면, 바인딩리절트 객체에 어떠한 값이 담기게 된다. -> 그러므로 바인딩 리절트는 대상 객체 뒤에 선언되어야 한다.
	 * */
	@PostMapping("/add")
	public String saveV7(Item item, BindingResult bindingResult,  RedirectAttributes redirectAttributes){

		if(item.getItemName() == null) {
			// FieldError : field단위의 error를 처리하는 spring 제공해주는 객체
			bindingResult.addError(new FieldError("item", "itemName", "상품 이름은 필수입니다."));
		}
		
		//검증에 실패하면 다시 입력 폼으로
		
		if(bindingResult.hasErrors()) {
			System.out.println("errors = " + bindingResult);
			return "basic/addForm";
		}
		
		Item savaItem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", savaItem.getId());
		redirectAttributes.addAttribute("status", true);
		
		
		return "redirect:/basic/items/{itemId}" ;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@GetMapping("/{itemId}/edit")
	public String editForm(@PathVariable Long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/editForm";
	}
	

	@PostMapping("/{itemId}/edit")
	public String edit(@PathVariable Long itemId, @ModelAttribute Item item) {
		itemRepository.update(itemId, item);
		//상세페이지
		return "redirect:/basic/items/{itemId}";
	}
	
	
	//테스트용 데이터 추가
	@PostConstruct
	public void init() {
//		System.out.println("초기화 메서드");
		itemRepository.save(new Item("testA", 10000, 10));
		itemRepository.save(new Item("testB", 20000, 20));
		itemRepository.save(new Item("testC", 30000, 30));
	}
	
	@PreDestroy
	public void destroy() {
		System.out.println("종료 메서드");
	}
}
