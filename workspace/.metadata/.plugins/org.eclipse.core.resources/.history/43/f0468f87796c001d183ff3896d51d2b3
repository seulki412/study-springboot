package com.example.item.domain.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.item.domain.item.Item;
import com.example.item.domain.item.ItemRepository;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/basic/items")
@RequiredArgsConstructor
// @RequiredArgsConstructor
//	: final이 붙은 멤버변수만 사용해서 생성자를 자동으로 만들어준다.
public class ItemController {

	private final ItemRepository itemRepository;
	
//	@Autowired
	//생성자가 1개만 있으면 @Autowired 생략가능
//	public ItemController(ItemRepository itemRepository) {
//		this.itemRepository = itemRepository;
//	}
	
	@GetMapping
	public String items(Model model) {
		List<Item> items = itemRepository.findAll();
		model.addAttribute("items", items);
		return "basic/items";
	}
	
	
	
	// /basic/items/아이템의ID
	@GetMapping("/{itemId}")
	public String item(@PathVariable long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/item";
	}
	
	@GetMapping("/add")
	public String add() {
		return "basic/addForm";
	}
	
	@PostMapping("/add")
	public String save(Model model) {
		List<Object> list = new ArrayList<Object>();
		
		list.add(model.getAttribute("itemName"));
		list.add(model.getAttribute("price"));
		list.add(model.getAttribute("quantity"));
		
		model.addAttribute("item", list);
		return "basic/item";
	}
	
	
	//테스트용 데이터 추가
	@PostConstruct
	public void init() {
//		System.out.println("초기화 메서드");
		itemRepository.save(new Item("testA", 10000, 10));
		itemRepository.save(new Item("testB", 20000, 20));
		itemRepository.save(new Item("testC", 30000, 30));
	}
	
	@PreDestroy
	public void destroy() {
		System.out.println("종료 메서드");
	}
}
